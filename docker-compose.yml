services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user

  db:
    image: postgres:15
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: changeit
      POSTGRES_DB: defense
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./scans:/scans
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d defense"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    container_name: backend
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://postgres:changeit@db:5432/defense
      RABBITMQ_URL: amqp://user:pass@rabbitmq:5672
    volumes:
      - ./scanners:/app/scanners
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8000:8000"
    working_dir: /app

  frontend:
    build: ./frontend
    container_name: frontend
    depends_on:
      - backend
    ports:
      - "8001:80"

  # Network Intelligence Agent (Passive + Active Scanning)
  # No credentials needed - uses network protocols only
  network-intel:
    build: ./scanners
    container_name: network-intel
    depends_on:
      - backend
    environment:
      - API_URL=http://backend:8000
      - AGENT_TYPE=network_intel
    command: ["python", "-u", "/app/specialized_agent.py", "network_intel"]
    cap_add:
      - NET_ADMIN
      - NET_RAW
    restart: unless-stopped

  # Malware Scanner Agent
  malware-scanner:
    build: ./scanners
    container_name: malware-scanner
    depends_on:
      - backend
    environment:
      - API_URL=http://backend:8000
      - AGENT_TYPE=malware
    command: ["python", "-u", "/app/specialized_agent.py", "malware"]
    volumes:
      - /tmp:/scan/tmp:ro
      - /var/log:/scan/var/log:ro
    restart: unless-stopped

  # Security Audit Scanner Agent
  security-scanner:
    build: ./scanners
    container_name: security-scanner
    depends_on:
      - backend
    environment:
      - API_URL=http://backend:8000
      - AGENT_TYPE=security_audit
    command: ["python", "-u", "/app/specialized_agent.py", "security_audit"]
    volumes:
      - /etc:/etc:ro
      - /var/log:/var/log:ro
    restart: unless-stopped

  # Legacy all-in-one scanner (optional, can be removed)
  scanner:
    build: ./scanners
    container_name: scanner
    depends_on:
      - backend
    environment:
      - API_URL=http://backend:8000/events
      - SCAN_MODE=network
    volumes:
      - /etc:/etc:ro
      - /var/log:/var/log:ro
    cap_add:
      - NET_ADMIN
      - NET_RAW
    restart: unless-stopped
    profiles:
      - legacy  # Only start with --profile legacy

  clamav:
    image: clamav/clamav:latest
    container_name: clamav
    command: tail -f /dev/null   # idle, waits for manual trigger
    volumes:
      - ./scans:/scans
    depends_on:
      - backend

  tshark:
    image: ubuntu:22.04
    container_name: tshark
    network_mode: "host"   # so it can sniff real traffic
    cap_add:
      - NET_ADMIN
      - NET_RAW
    command: 
      - /bin/bash
      - -c
      - |
        apt-get update && \
        apt-get install -y tshark && \
        tshark --version && \
        tail -f /dev/null
    depends_on:
      - backend

  nmap:
    image: docker.io/instrumentisto/nmap:latest
    container_name: nmap
    command: tail -f /dev/null   # idle
    depends_on:
      - backend

  model-server:
    build: ./model-server
    container_name: model-server
    ports:
      - "11434:11434"
    depends_on:
      - backend

volumes:
  db_data:

