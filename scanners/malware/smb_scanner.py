"""
SMB/CIFS Scanner - Scan files on network shares without SSH
Works with Windows shares, NAS devices, and Samba shares
"""

import asyncio
import subprocess
import json
import os
import tempfile
from typing import Dict, Any, List


class SMBScanner:
    """Scan files over SMB/CIFS network shares."""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.results = []
        self.errors = []
        self.temp_dir = tempfile.mkdtemp(prefix="smb_scan_")
    
    async def mount_share(self, share_path: str, username: str = None, password: str = None) -> str:
        """Mount SMB share to local directory."""
        mount_point = os.path.join(self.temp_dir, "mount")
        os.makedirs(mount_point, exist_ok=True)
        
        # Build mount command
        cmd = ["mount", "-t", "cifs", share_path, mount_point]
        
        if username and password:
            cmd.extend(["-o", f"username={username},password={password}"])
        else:
            cmd.extend(["-o", "guest"])
        
        try:
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            await process.communicate()
            
            if process.returncode == 0:
                return mount_point
            else:
                self.errors.append(f"Failed to mount {share_path}")
                return None
                
        except Exception as e:
            self.errors.append(f"Mount error: {str(e)}")
            return None
    
    async def scan_mounted_share(self, mount_point: str):
        """Scan files in mounted share with ClamAV."""
        cmd = ["clamscan", "-r", "--infected", "--no-summary", mount_point]
        
        try:
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await asyncio.wait_for(
                process.communicate(),
                timeout=3600  # 1 hour timeout for large shares
            )
            
            infected_files = []
            for line in stdout.decode('utf-8', errors='ignore').split('\n'):
                if 'FOUND' in line:
                    parts = line.split(':')
                    if len(parts) >= 2:
                        file_path = parts[0].strip()
                        virus_name = parts[1].replace('FOUND', '').strip()
                        infected_files.append({
                            'file': file_path,
                            'threat': virus_name
                        })
            
            self.results.append({
                'scanner': 'clamav_smb',
                'mount_point': mount_point,
                'details': {
                    'infected_files': infected_files,
                    'total_infected': len(infected_files)
                }
            })
            
        except Exception as e:
            self.errors.append(f"Scan error: {str(e)}")
    
    async def unmount_share(self, mount_point: str):
        """Unmount SMB share."""
        try:
            cmd = ["umount", mount_point]
            process = await asyncio.create_subprocess_exec(*cmd)
            await process.communicate()
        except Exception as e:
            self.errors.append(f"Unmount error: {str(e)}")
    
    async def scan(self):
        """Scan SMB shares."""
        shares = self.config.get('smb', {}).get('shares', [])
        
        for share_config in shares:
            share_path = share_config.get('path')  # e.g., //192.168.1.100/share
            username = share_config.get('username')
            password = share_config.get('password')
            
            # Mount share
            mount_point = await self.mount_share(share_path, username, password)
            
            if mount_point:
                # Scan mounted share
                await self.scan_mounted_share(mount_point)
                
                # Unmount
                await self.unmount_share(mount_point)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert scan results to dictionary."""
        return {
            "scanner_type": "smb",
            "results": self.results,
            "errors": self.errors
        }


# Example usage
async def main():
    config = {
        "smb": {
            "shares": [
                {
                    "path": "//192.168.1.100/shared",
                    "username": "scanner",
                    "password": "password"
                }
            ]
        }
    }
    
    scanner = SMBScanner(config)
    await scanner.scan()
    print(json.dumps(scanner.to_dict(), indent=2))


if __name__ == "__main__":
    asyncio.run(main())
