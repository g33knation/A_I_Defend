"""
Malware Scanner Agent - Specialized for malware detection
Includes: ClamAV (antivirus) and YARA (pattern matching)
"""

import asyncio
import subprocess
import json
import os
import tempfile
import shutil
from datetime import datetime
from typing import Dict, Any, List
try:
    import yara
except ImportError:
    yara = None


class MalwareScanner:
    """Malware detection scanner."""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.results = []
        self.errors = []
        self.temp_dir = tempfile.mkdtemp(prefix="malware_scan_")
        self.remote_host = config.get('remote_host')  # SSH target: user@host
        self.remote_key = config.get('remote_key')    # SSH key path
        
        # Initialize YARA rules if available
        self.yara_rules = None
        if yara:
            yara_rules_dir = self.config.get("yara", {}).get("rules_dir", "/etc/yara-rules")
            if os.path.isdir(yara_rules_dir):
                try:
                    rule_files = {}
                    for root, dirs, files in os.walk(yara_rules_dir):
                        for file in files:
                            if file.endswith('.yar') or file.endswith('.yara'):
                                rule_path = os.path.join(root, file)
                                rule_files[file] = rule_path
                    
                    if rule_files:
                        self.yara_rules = yara.compile(filepaths=rule_files)
                except Exception as e:
                    self.errors.append(f"Failed to load YARA rules: {str(e)}")
    
    async def run_command(self, cmd: List[str], timeout: int = 600) -> Dict[str, Any]:
        """Execute a command asynchronously."""
        try:
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await asyncio.wait_for(
                process.communicate(),
                timeout=timeout
            )
            
            return {
                "returncode": process.returncode,
                "stdout": stdout.decode('utf-8', errors='ignore'),
                "stderr": stderr.decode('utf-8', errors='ignore')
            }
        except asyncio.TimeoutError:
            return {
                "returncode": -1,
                "stdout": "",
                "stderr": f"Command timed out after {timeout} seconds"
            }
        except Exception as e:
            return {
                "returncode": -1,
                "stdout": "",
                "stderr": str(e)
            }
    
    async def scan_clamav(self, paths: List[str]):
        """Run ClamAV antivirus scan (local or remote)."""
        for path in paths:
            # Build command based on local or remote scanning
            if self.remote_host:
                # Remote scan via SSH
                ssh_cmd = ["ssh"]
                if self.remote_key:
                    ssh_cmd.extend(["-i", self.remote_key])
                ssh_cmd.extend([self.remote_host, f"clamscan -r --infected --no-summary {path}"])
                cmd = ssh_cmd
            else:
                # Local scan
                if not os.path.exists(path):
                    self.errors.append(f"Path does not exist: {path}")
                    continue
                cmd = ["clamscan", "-r", "--infected", "--no-summary", path]
            
            try:
                result = await self.run_command(cmd, timeout=1800)
                
                infected_files = []
                for line in result["stdout"].split('\n'):
                    if 'FOUND' in line:
                        parts = line.split(':')
                        if len(parts) >= 2:
                            file_path = parts[0].strip()
                            virus_name = parts[1].replace('FOUND', '').strip()
                            infected_files.append({
                                'file': file_path,
                                'threat': virus_name
                            })
                
                self.results.append({
                    'scanner': 'clamav',
                    'path': path,
                    'details': {
                        'infected_files': infected_files,
                        'total_infected': len(infected_files),
                        'scan_complete': result["returncode"] in [0, 1]  # 0 = clean, 1 = infected
                    }
                })
                
            except Exception as e:
                self.errors.append(f"ClamAV scan error for {path}: {str(e)}")
    
    async def scan_yara(self, paths: List[str]):
        """Run YARA pattern matching scan."""
        if not self.yara_rules:
            self.errors.append("YARA rules not loaded")
            return
        
        matches_found = []
        
        for path in paths:
            if not os.path.exists(path):
                continue
            
            try:
                if os.path.isfile(path):
                    files_to_scan = [path]
                else:
                    files_to_scan = []
                    for root, dirs, files in os.walk(path):
                        for file in files:
                            files_to_scan.append(os.path.join(root, file))
                
                for file_path in files_to_scan:
                    try:
                        matches = self.yara_rules.match(file_path)
                        if matches:
                            for match in matches:
                                matches_found.append({
                                    'file': file_path,
                                    'rule': match.rule,
                                    'tags': match.tags,
                                    'meta': match.meta
                                })
                    except Exception:
                        # Skip files that can't be scanned
                        continue
                
            except Exception as e:
                self.errors.append(f"YARA scan error for {path}: {str(e)}")
        
        if matches_found:
            self.results.append({
                'scanner': 'yara',
                'details': {
                    'matches': matches_found,
                    'total_matches': len(matches_found)
                }
            })
    
    async def scan(self):
        """Run all malware scans."""
        # Run ClamAV if configured
        if 'clamav' in self.config:
            paths = self.config['clamav'].get('paths', ['/tmp'])
            await self.scan_clamav(paths)
        
        # Run YARA if configured
        if 'yara' in self.config and yara:
            paths = self.config['yara'].get('paths', ['/tmp'])
            await self.scan_yara(paths)
        
        # Cleanup
        if os.path.exists(self.temp_dir):
            shutil.rmtree(self.temp_dir, ignore_errors=True)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert scan results to dictionary."""
        return {
            "timestamp": datetime.utcnow().isoformat(),
            "agent_type": "malware",
            "results": self.results,
            "errors": self.errors
        }


async def main():
    """Test the malware scanner."""
    config = {
        "clamav": {
            "paths": ["/tmp"]
        }
    }
    
    scanner = MalwareScanner(config)
    await scanner.scan()
    print(json.dumps(scanner.to_dict(), indent=2))


if __name__ == "__main__":
    asyncio.run(main())
